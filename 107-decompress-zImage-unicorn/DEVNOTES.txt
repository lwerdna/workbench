If the kernel is compressed, execution begins in:
arch/arm/boot/compressed/head.S in the symbol start:
https://elixir.bootlin.com/linux/v3.0/source/arch/arm/boot/compressed/head.S

Indeed, after 64-byte header, we find:

$ xxd -l 0x70 -g 1 /path/to/uImage
...
00000040: 00 00 a0 e1 00 00 a0 e1 00 00 a0 e1 00 00 a0 e1  ................
00000050: 00 00 a0 e1 00 00 a0 e1 00 00 a0 e1 00 00 a0 e1  ................
00000060: 02 00 00 ea 18 28 6f 01 00 00 00 00 b0 fa 9f 00  .....(o.........

Which is 8x "mov r0, r0" then "b 0x10" then 0x016f2818 magic number.

1. nops, jump over magic
2. determine final kernel image address
  if CONFIG_AUT_ZRELADDR: address is PC with top 5 bits preserved + TEXT_OFFSET
  else is =zreladdr (ldr r4, =zreladdr)
3. paging turned on for caching (bl cache_on)

In my kernel that executes from 0x40008000 this sets page tables at 0x40004000
40004000: 00000C12 00100C12 00200C12 00300C12
40004010: 00400C12 00500C12 00600C12 00700C12
...
40005000: 40000C0E 40100C0E 40200C0E 40300C0E
...
40006000: 80000C12 80100C12 80200C12 80300C12
...
40007000: C0000C12 C0100C12 C0200C12 C0300C12
...
40007FF0: FFC00C12 FFD00C12 FFE00C12 FFF00C12

r4 then gets final location, depending on CONFIG_AUTO_ZRELADDR

The descending addresses are due to the ldmdb/stmdb combo used to memcpy() the decompressor and data:
...
mapped [415A3000, 415A4000) RWX <-- relocating
mapped [415A2000, 415A3000) RWX     "
mapped [415A1000, 415A2000) RWX     "
mapped [415A0000, 415A1000) RWX     "
mapped [41FA1000, 41FA2000) RWX <-- ?
mapped [12080000, 12081000) RW- <-- write to UART?
mapped [41FA2000, 41FA3000) RWX <-- ?
mapped [41FA3000, 41FA4000) RWX <-- ?
mapped [41FA4000, 41FA5000) RWX <-- ?
mapped [41FA5000, 41FA6000) RWX <-- ?
(long delay here)
mapped [40A08000, 40A09000) RWX <-- decompression?
mapped [40A09000, 40A0A000) RWX
mapped [40A0A000, 40A0B000) RWX
mapped [40A0B000, 40A0C000) RWX
...

After decompression, jump to decompressed code lands at symbols "stext", located in arch/arm/kernel/head.S:

This function calls __vet_atags() in arch/arm/kernel/head-common.S and accesses the address given in r2 at first jump.

Thus we can provide a sentinel address and capture when actual kernel is executing.

References:
How The ARM32 kernel starts - linusw
  https://people.kernel.org/linusw/how-the-arm32-kernel-starts
Booting ARM Linux - Vincent Sanders
  http://www.simtec.co.uk/products/SWLINUX/files/booting_article.html
How the ARM32 Linux kernel decompresses - linusw
  https://people.kernel.org/linusw/how-the-arm32-linux-kernel-decompresses
Setting Up the ARM32 Architecture, part 1
  https://people.kernel.org/linusw/setting-up-the-arm32-architecture-part-1
Setting Up the ARM32 Architecture, part 2
  https://people.kernel.org/linusw/setting-up-the-arm32-architecture-part-2
